[anonymous-telemetry]
# This is opt-in by default, but we explicitly disable here as well.
enabled = false
# repo_id here allows individuals to opt-in on their machine
# To opt-in, use ~/.pants.rc or envrc to set [anonymous-telemetry].enabled=true
repo_id = "de0dea7a-9f6a-4c6e-aa20-6ba5ad969b8a"

[GLOBAL]
pants_version = "2.6.0.dev0"
pythonpath = ["%(buildroot)s/pants-plugins"]
backend_packages = [
  "pants.backend.python",
  "pants.backend.python.mixed_interpreter_constraints",
  "pants.backend.python.lint.bandit",
  "pants.backend.python.lint.black",
#  "pants.backend.python.lint.docformatter",
  "pants.backend.python.lint.flake8",
#  "pants.backend.python.lint.isort",
  "pants.backend.python.lint.pylint",
#  "pants.backend.python.typecheck.mypy",

  # internal plugins in pants-plugins/
  "uses_services",
  "stevedore_extensions",
  "pack_metadata",
]
plugins = [
  # dependencies for internal plugins
  #"distro",  # dep of the pex
]
pants_ignore = [
  ".*/",  # . directories
  "/dist/",
  # TODO: remove these, replace with pyproject.toml
  "dist_utils.py",
  #"setup.py",
]

[source]
marker_filenames = [
  # /contrib/* packs (not any of the st2tests fixture packs)
  "PACK_ROOT",
]
# do not use /contrib/* in root_patterns or *_runner imports become ambiguous
# eg `import noop_runner` should use runners/noop_runner/noop_runner not runners/noop_runner
root_patterns = [
  # root conftest.py
  "/",
  # core libs
  "/st2*",
  # runners
  "/contrib/runners/*_runner",
  # odd import in examples.isprime
  "/contrib/examples/lib",
  # test packs that do not have pack.yaml
  "/st2tests/testpacks/*",
  # lint plugins
  "/pylint_plugins",
  # pants plugins
  "/pants-plugins",
  # misc
  "/scripts",
  "/tools",
  # benchmarks
  "/st2common/benchmarks/micro",
]

[python-setup]
#resolver_version = "pip-2020-resolver"
requirement_constraints = "constraints-pants.txt"
interpreter_constraints = [
  # work around a pants bug. TODO: uncomment this
  "CPython==3.6.*",
  # we will be targeting 3.8 next (skipping 3.7)
  #"CPython==3.8.*",
]

[python-infer]
inits = true

[bandit]
version = "bandit==1.7.0"
args = [
  "-lll",  # only HIGH severity level
  "--exclude",
  "build,dist",
]

[black]
version = "black==20.8b1"

[flake8]
version = "flake8>=3.7.9,<3.9"
extra_requirements = [
  # license check plugin
  "st2flake8==0.1.0",
]
config = "lint-configs/python/.flake8"

[pylint]
version = "pylint~=2.7.4"
# < 2.7 doesn't work with the version of astroid pinned for the plugin
config = "lint-configs/python/.pylintrc"
source_plugins = [
  # the /pylint_plugins directory
  "pylint_plugins",
]
args = [
  # concurrency is not handled by pants for linters (yet)
  # using 0 allows pylint to auto-detect the number of available processors.
  # if needed (eg in CI) use an env var like this to override the jobs count:
  #   PANTS_PYLINT_ARGS='+["--jobs=4"]'
  "--jobs=0",
  # match the current Makefile usage with -E (TODO: drop this)
  "--errors-only",
  # needed in st2* components, runners, packs
  "--load-plugins=api_models",
  # needed in st2* components, runners
  "--load-plugins=db_models",
]

[pytest]
version = "pytest>=6.0.1,<6.3"
pytest_plugins.add = [
  "pytest-benchmark[histogram]==3.4.1",
  #"pytest-timer[colorama]",  # report test timing (--with-timer ala nose-timer)
  "pytest-icdiff",  # make diff output easier to read
  "pygments",  # highlight code in tracebacks

  # other possible plugins
  #"pytest-timeout",  # time limit on tests
  #"pytest-cov",  # coverage
  #"pytest-mock",  # more convenient mocking

  # do not add: xdist (pants runs tests in parallel already)
]
args = [
  "--no-header",  # don't print pytest version for every tested file
]
execution_slot_var = "ST2TESTS_PARALLEL_SLOT"

[subprocess-environment]
env_vars.add = [
  # vars to trigger injecting pydevd-pycharm
  "ST2_PYCHARM_DEBUG",
  "ST2_PYCHARM_DEBUG_HOST",
  "ST2_PYCHARM_DEBUG_PORT",
  # For users testing with python from XCode, make sure to export ARCHFLAGS
  # see: https://github.com/pantsbuild/pants/pull/11733
  "ARCHFLAGS",
]
